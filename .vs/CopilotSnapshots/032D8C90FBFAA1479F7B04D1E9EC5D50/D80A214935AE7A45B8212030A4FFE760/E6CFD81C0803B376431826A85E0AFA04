using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using ExpenseManager.Models;
using ExpenseManager.Services;

namespace ExpenseManager.Controllers {
    public class ExpenseController {
        private ExpenseManager.Services.ExpenseManager expenseManager;

        public ExpenseController() {
            expenseManager = new ExpenseManager.Services.ExpenseManager();
            
            // Chỉ load từ file nếu chưa có data trong memory
            if (expenseManager.Expenses.Count == 0) {
                expenseManager.LoadExpensesFromFile();
            }
        }

        public bool AddExpense(decimal amount, string description, string category) {
            if (!ValidateExpense(amount, description, category)) {
                return false;
            }

            try {
                Expense expense = new Expense(amount, description, DateTime.Now, category);
                expenseManager.AddExpense(expense);
                return true;
            } catch (Exception) {
                return false;
            }
        }

        public List<Expense> GetAllExpenses() {
            return expenseManager.Expenses;
        }

        public decimal GetTotalExpenses() {
            return expenseManager.GetTotal();
        }

        public bool DeleteExpense(int index) {
            try {
                if (index >= 0 && index < expenseManager.Expenses.Count) {
                    expenseManager.Expenses.RemoveAt(index);
                    expenseManager.SaveExpensesToFile();
                    return true;
                }
                return false;
            } catch (Exception) {
                return false;
            }
        }

        // Version ngắn gọn của LoadExpensesFromJson
        public bool LoadExpensesFromJson() {
            try {
                string jsonPath = @"..\..\Data\User\expenses.json";
                
                if (!File.Exists(jsonPath)) {
                    return false;
                }

                string json = File.ReadAllText(jsonPath, System.Text.Encoding.UTF8);
                
                JsonSerializerOptions options = new JsonSerializerOptions {
                    PropertyNameCaseInsensitive = true
                };
                
                List<Expense> loadedExpenses = JsonSerializer.Deserialize<List<Expense>>(json, options);
                
                if (loadedExpenses != null && loadedExpenses.Count > 0) {
                    expenseManager.Expenses.Clear();
                    
                    foreach (Expense expense in loadedExpenses) {
                        expenseManager.Expenses.Add(expense);
                    }
                    
                    expenseManager.SaveExpensesToFile();
                    return true;
                }
                return false;
            } catch (Exception) {
                return false;
            }
        }

        private bool ValidateExpense(decimal amount, string description, string category) {
            if (amount <= 0) return false;
            if (string.IsNullOrWhiteSpace(description)) return false;
            if (string.IsNullOrWhiteSpace(category)) return false;
            return true;
        }
    }
}